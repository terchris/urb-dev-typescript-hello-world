# file: .devcontainer/Dockerfile.base
# Description: Base install for all devcontainers

# Use the official Python devcontainer image as the base
FROM mcr.microsoft.com/devcontainers/python:1-3.11-bookworm

# Switch to vscode user
USER vscode

# Sending env variables from the host to the container
ARG DEV_MAC_LOGNAME
ARG DEV_MAC_USER

ARG DEV_WIN_USERDNSDOMAIN
ARG DEV_WIN_USERDOMAIN
ARG DEV_WIN_USERDOMAIN_ROAMINGPROFILE
ARG DEV_WIN_USERNAME
ARG DEV_WIN_COMPUTERNAME
ARG DEV_WIN_OS

ENV DEV_MAC_LOGNAME=$DEV_MAC_LOGNAME
ENV DEV_MAC_USER=$DEV_MAC_USER

ENV DEV_WIN_USERDNSDOMAIN=$DEV_WIN_USERDNSDOMAIN
ENV DEV_WIN_USERDOMAIN=$DEV_WIN_USERDOMAIN
ENV DEV_WIN_USERDOMAIN_ROAMINGPROFILE=$DEV_WIN_USERDOMAIN_ROAMINGPROFILE
ENV DEV_WIN_USERNAME=$DEV_WIN_USERNAME
ENV DEV_WIN_COMPUTERNAME=$DEV_WIN_COMPUTERNAME
ENV DEV_WIN_OS=$DEV_WIN_OS

# Set environment variable to avoid interactive prompts during `apt install`
ENV DEBIAN_FRONTEND=noninteractive

# Install additional packages
# - libcap2-bin: Allows setting file capabilities, helpful for network or permission management tasks.
# - iputils-ping: Provides the `ping` command, useful for network connectivity testing.
# - iproute2: Includes networking utilities like `ip` for managing network interfaces and routing.
# - traceroute: Used to trace the route packets take to a network host, useful for network diagnostics.
# - jc: Converts command-line tool output to JSON for easier parsing.
# - xdg-utils: Contains utilities like `xdg-open` to open URLs or files, enabling users to click links in the container.


# Install packages - Note that sudo is already configured in the base image for vscode user
RUN sudo apt-get update && \
    sudo apt-get install -y --no-install-recommends \
        libcap2-bin \
        iputils-ping \
        iproute2 \
        traceroute \
        jc \
        xdg-utils \
        git \
        curl \
        wget \
        zip \
        unzip && \
    sudo apt-get clean && \
    sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Node.js and configure npm for vscode user
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - && \
    sudo apt-get install -y nodejs && \
    sudo apt-get clean && \
    sudo rm -rf /var/lib/apt/lists/* && \
    # Create the complete directory structure
    sudo mkdir -p /usr/local/lib/node_modules && \
    sudo mkdir -p /usr/local/bin && \
    # Set permissions recursively
    sudo chown -R vscode:vscode /usr/local/lib/node_modules && \
    sudo chown -R vscode:vscode /usr/local/bin && \
    # Ensure npm is properly configured
    npm config set prefix '/usr/local' && \
    # Add npm global bin to PATH
    echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bashrc

# Add the new npm global bin to PATH for the current build
ENV PATH=/usr/local/bin:$PATH

# Install Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

# Install PowerShell - there was a mac arm problem
# Install PowerShell directly from GitHub release
RUN cd /tmp && \
    arch=$(dpkg --print-architecture) && \
    if [ "$arch" = "amd64" ]; then \
        wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb -O powershell.deb; \
    else \
        wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_arm64.deb -O powershell.deb; \
    fi && \
    sudo dpkg -i powershell.deb || true && \
    sudo apt-get update && \
    sudo apt-get install -f -y && \
    sudo rm powershell.deb && \
    sudo apt-get clean && \
    sudo rm -rf /var/lib/apt/lists/*
    
ENV DEBIAN_FRONTEND=

